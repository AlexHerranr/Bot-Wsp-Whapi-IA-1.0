// scripts/client-complete-info.ts
// Vista completa y simplificada de toda la informaci√≥n de clientes

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function getCompleteClientInfo() {
    try {
        await prisma.$connect();
        console.log('üë• INFORMACI√ìN COMPLETA DE CLIENTES');
        console.log('===================================\n');

        const users = await prisma.user.findMany({
            include: {
                threads: {
                    include: {
                        messages: {
                            orderBy: { createdAt: 'desc' }
                        }
                    }
                }
            },
            orderBy: { lastActivity: 'desc' }
        });

        const now = new Date();
        
        // RESUMEN EJECUTIVO
        console.log('üìä RESUMEN EJECUTIVO:');
        console.log(`   üë• Total Clientes: ${users.length}`);
        
        let nuevos = 0, activos = 0, inactivos = 0;
        users.forEach(user => {
            const totalMessages = user.threads.reduce((sum, t) => sum + t.messages.length, 0);
            const daysSinceActivity = Math.floor((now.getTime() - user.lastActivity.getTime()) / (1000 * 60 * 60 * 24));
            
            if (totalMessages === 0) nuevos++;
            else if (daysSinceActivity <= 1) activos++;
            else inactivos++;
        });
        
        console.log(`   üÜï Nuevos (sin mensajes): ${nuevos}`);
        console.log(`   üî• Activos (√∫ltimo d√≠a): ${activos}`);
        console.log(`   üò¥ Inactivos: ${inactivos}\n`);

        // INFORMACI√ìN DETALLADA POR CLIENTE
        console.log('üìã INFORMACI√ìN DETALLADA POR CLIENTE:');
        console.log('====================================\n');

        const clientsData = [];

        users.forEach((user, index) => {
            const thread = user.threads[0]; // Thread m√°s reciente
            const allMessages = user.threads.flatMap(t => t.messages);
            const lastMessage = allMessages[0];
            const userMessages = allMessages.filter(m => m.role === 'user');
            const botMessages = allMessages.filter(m => m.role === 'assistant');
            const daysSinceActivity = Math.floor((now.getTime() - user.lastActivity.getTime()) / (1000 * 60 * 60 * 24));
            
            // Determinar estado
            let estado = '';
            let prioridad = '';
            let accionSugerida = '';
            
            if (allMessages.length === 0) {
                estado = 'üÜï Nuevo';
                prioridad = '‚ö° Alta';
                accionSugerida = 'Dar bienvenida personalizada';
            } else if (daysSinceActivity <= 1) {
                estado = 'üî• Activo';
                prioridad = '‚ö° Alta';
                accionSugerida = 'Responder normalmente';
            } else if (daysSinceActivity <= 7) {
                estado = 'üíé Potencial';
                prioridad = 'üìä Media';
                accionSugerida = 'Hacer seguimiento proactivo';
            } else {
                estado = 'üò¥ Inactivo';
                prioridad = 'üîª Baja';
                accionSugerida = 'Reactivar con oferta especial';
            }
            
            console.log(`${index + 1}. üì± CLIENTE: ${user.phoneNumber}`);
            console.log(`   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
            console.log(`   üë§ INFORMACI√ìN B√ÅSICA:`);
            console.log(`      Nombre: ${user.name || 'Sin nombre'}`);
            console.log(`      ID Sistema: ${user.id}`);
            console.log(`      Tel√©fono: ${user.phoneNumber}`);
            console.log(`      Chat ID: ${thread?.chatId || user.phoneNumber}`);
            
            console.log(`\n   üìÖ FECHAS IMPORTANTES:`);
            console.log(`      Registro: ${user.createdAt.toLocaleString('es-CO')}`);
            console.log(`      √öltima Actividad: ${user.lastActivity.toLocaleString('es-CO')}`);
            console.log(`      D√≠as sin Actividad: ${daysSinceActivity}`);
            
            console.log(`\n   üí¨ CONVERSACIONES:`);
            console.log(`      Thread ID: ${thread?.openaiId || 'Sin thread'}`);
            console.log(`      Total Threads: ${user.threads.length}`);
            console.log(`      Creado: ${thread?.createdAt.toLocaleString('es-CO') || 'N/A'}`);
            console.log(`      √öltima Actividad Thread: ${thread?.lastActivity.toLocaleString('es-CO') || 'N/A'}`);
            
            console.log(`\n   üìù MENSAJES:`);
            console.log(`      Total Mensajes: ${allMessages.length}`);
            console.log(`      Mensajes Usuario: ${userMessages.length}`);
            console.log(`      Mensajes Bot: ${botMessages.length}`);
            console.log(`      √öltimo Mensaje: "${lastMessage?.content.substring(0, 80) || 'Sin mensajes'}${lastMessage && lastMessage.content.length > 80 ? '...' : ''}"`);
            console.log(`      Fecha √öltimo Mensaje: ${lastMessage?.createdAt.toLocaleString('es-CO') || 'N/A'}`);
            console.log(`      Tipo √öltimo: ${lastMessage?.role === 'user' ? 'üë§ Usuario' : lastMessage?.role === 'assistant' ? 'ü§ñ Bot' : 'N/A'}`);
            
            console.log(`\n   üè∑Ô∏è ETIQUETAS Y CLASIFICACI√ìN:`);
            const labels = (thread?.labels as string[]) || [];
            console.log(`      Labels: ${labels.length > 0 ? labels.join(', ') : 'Sin etiquetas'}`);
            console.log(`      Estado: ${estado}`);
            console.log(`      Es Nuevo: ${allMessages.length === 0 ? '‚úÖ S√≠' : '‚ùå No'}`);
            console.log(`      Es Activo Hoy: ${daysSinceActivity <= 1 ? '‚úÖ S√≠' : '‚ùå No'}`);
            console.log(`      Necesita Seguimiento: ${daysSinceActivity > 3 && allMessages.length > 0 ? '‚ö†Ô∏è S√ç' : '‚úÖ No'}`);
            
            console.log(`\n   üéØ RECOMENDACIONES PARA EL SISTEMA:`);
            console.log(`      Prioridad de Respuesta: ${prioridad}`);
            console.log(`      Acci√≥n Sugerida: ${accionSugerida}`);
            console.log(`      Tiempo Respuesta Sugerido: ${prioridad.includes('Alta') ? 'Inmediato (< 5 min)' : prioridad.includes('Media') ? 'R√°pido (< 30 min)' : 'Normal (< 2 horas)'}`);
            
            // Metadata t√©cnica si existe
            if (thread?.metadata) {
                console.log(`\n   üîß METADATA T√âCNICA:`);
                console.log(`      ${JSON.stringify(thread.metadata, null, 6)}`);
            }
            
            console.log(`\n${'‚ïê'.repeat(60)}\n`);
            
            // Guardar para CSV
            clientsData.push({
                'Tel√©fono': user.phoneNumber,
                'Nombre': user.name || 'Sin nombre',
                'ID Sistema': user.id,
                'Chat ID': thread?.chatId || user.phoneNumber,
                'Thread ID': thread?.openaiId || 'Sin thread',
                'Fecha Registro': user.createdAt.toLocaleDateString('es-CO'),
                '√öltima Actividad': user.lastActivity.toLocaleDateString('es-CO'),
                'D√≠as sin Actividad': daysSinceActivity,
                'Estado': estado.replace(/[üÜïüî•üíéüò¥]/g, '').trim(),
                'Total Mensajes': allMessages.length,
                'Mensajes Usuario': userMessages.length,
                'Mensajes Bot': botMessages.length,
                '√öltimo Mensaje': lastMessage?.content.substring(0, 100) || 'Sin mensajes',
                'Fecha √öltimo Mensaje': lastMessage?.createdAt.toLocaleDateString('es-CO') || 'N/A',
                'Tipo √öltimo': lastMessage?.role || 'N/A',
                'Labels': labels.join(', '),
                'Prioridad': prioridad.replace(/[‚ö°üìäüîª]/g, '').trim(),
                'Acci√≥n Sugerida': accionSugerida,
                'Necesita Seguimiento': daysSinceActivity > 3 && allMessages.length > 0 ? 'S√≠' : 'No'
            });
        });
        
        // EXPORTAR A CSV
        await exportToCSV(clientsData);
        
        console.log('\nüéØ CONCLUSIONES Y RECOMENDACIONES:');
        console.log('==================================');
        console.log('‚úÖ Esta vista te muestra TODA la informaci√≥n relevante de cada cliente');
        console.log('‚úÖ Incluye datos para seguimiento comercial Y t√©cnico');
        console.log('‚úÖ El sistema puede usar esta info para personalizar respuestas');
        console.log('‚úÖ Exportado a CSV para an√°lisis en Excel/Sheets');
        console.log('‚úÖ Tambi√©n visible en Prisma Studio (http://localhost:5555)');
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    } finally {
        await prisma.$disconnect();
    }
}

async function exportToCSV(data: any[]) {
    const fs = require('fs');
    const path = require('path');
    
    const exportDir = './exports';
    if (!fs.existsSync(exportDir)) {
        fs.mkdirSync(exportDir);
    }
    
    if (data.length === 0) return;
    
    const headers = Object.keys(data[0]);
    const csvContent = [
        headers.join(','),
        ...data.map(row => 
            headers.map(header => {
                const value = row[header];
                if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
                    return `"${value.replace(/"/g, '""')}"`;
                }
                return value || '';
            }).join(',')
        )
    ].join('\n');
    
    const filename = path.join(exportDir, 'informacion-completa-clientes.csv');
    fs.writeFileSync(filename, csvContent, 'utf8');
    
    console.log(`\nüìä ARCHIVO CSV EXPORTADO:`);
    console.log(`   üìÅ ${filename}`);
    console.log(`   üí° √Åbrelo en Excel/Google Sheets para an√°lisis`);
}

// Ejecutar
if (require.main === module) {
    getCompleteClientInfo();
}

export { getCompleteClientInfo };