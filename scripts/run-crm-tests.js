// scripts/run-crm-tests.js
// Script para ejecutar todos los tests CRM con coverage y reports

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('🧪 Running Complete CRM Test Suite...\n');

// Test categories
const testCategories = [
  {
    name: 'Tests Comunes (Shared Functionality)',
    pattern: 'tests/unit/crm-common.test.ts',
    description: '12 tests covering shared CRM functionality'
  },
  {
    name: 'Escenario A - Sistema Interno',
    pattern: 'tests/integration/crm-internal.test.ts', 
    description: '13 tests covering internal/autonomous system'
  },
  {
    name: 'Escenario B - Sistema N8N',
    pattern: 'tests/integration/crm-n8n.test.ts',
    description: '13 tests covering N8N/external system'
  },
  {
    name: 'Tests Originales CRM',
    pattern: 'tests/**/*crm*.test.ts',
    description: 'Original CRM integration and unit tests'
  }
];

// Function to run tests
function runTestCategory(category) {
  console.log(`\n📋 Running: ${category.name}`);
  console.log(`📝 ${category.description}\n`);

  try {
    const command = `npm test -- "${category.pattern}" --verbose --passWithNoTests`;
    console.log(`🔨 Command: ${command}\n`);
    
    const output = execSync(command, { 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    
    console.log(output);
    console.log(`✅ ${category.name} - PASSED\n`);
    return true;
  } catch (error) {
    console.error(`❌ ${category.name} - FAILED`);
    console.error(error.stdout || error.message);
    console.log('\n');
    return false;
  }
}

// Function to run all tests with coverage
function runAllTestsWithCoverage() {
  console.log('\n📊 Running All CRM Tests with Coverage...\n');
  
  try {
    const command = 'npm test -- --testPathPatterns=crm --coverage --coverageDirectory=tests/reports/coverage-crm';
    console.log(`🔨 Coverage Command: ${command}\n`);
    
    const output = execSync(command, { 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    
    console.log(output);
    console.log('✅ Coverage Report Generated\n');
    return true;
  } catch (error) {
    console.error('❌ Coverage Generation Failed');
    console.error(error.stdout || error.message);
    return false;
  }
}

// Function to generate summary report
function generateSummaryReport(results) {
  const totalTests = 38; // 12 + 13 + 13
  const passedCategories = results.filter(r => r.passed).length;
  const totalCategories = results.length;
  
  const report = `
# 🧪 CRM Test Suite Summary Report

**Generated:** ${new Date().toISOString()}

## 📊 Overview
- **Total Test Categories:** ${totalCategories}
- **Passed Categories:** ${passedCategories}
- **Failed Categories:** ${totalCategories - passedCategories}
- **Expected Total Tests:** ${totalTests}

## 📋 Test Categories Results

${results.map(result => `
### ${result.category.name}
- **Status:** ${result.passed ? '✅ PASSED' : '❌ FAILED'}
- **Description:** ${result.category.description}
- **Pattern:** \`${result.category.pattern}\`
`).join('\n')}

## 🎯 Coverage Goals
- **Target Coverage:** 80%+
- **Critical Paths:** OpenAI integration, Database updates, WHAPI calls
- **Error Handling:** All failure scenarios covered

## 📝 Test Breakdown
1. **Tests Comunes (12):** Shared functionality between both scenarios
2. **Escenario A (13):** Internal/autonomous CRM system  
3. **Escenario B (13):** N8N/external CRM system

## 🚀 Next Steps
${passedCategories === totalCategories ? 
  '✅ All test categories passing! CRM system ready for production.' :
  '⚠️ Some test categories failing. Review failed tests and fix issues before deployment.'
}

## 📂 Reports Location
- **Coverage Report:** \`tests/reports/coverage-crm/\`
- **Test Output:** Check console output above
- **Detailed Logs:** Available in CI/CD pipeline

---
*Generated by CRM Test Suite Runner*
`;

  // Ensure reports directory exists
  const reportsDir = path.join(process.cwd(), 'tests', 'reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }

  // Write summary report
  const reportPath = path.join(reportsDir, 'crm-test-summary.md');
  fs.writeFileSync(reportPath, report);
  
  console.log(`📝 Summary report generated: ${reportPath}`);
  return report;
}

// Main execution
async function main() {
  console.log('🎯 CRM Test Suite - Complete Validation');
  console.log('Testing both scenarios: Internal (A) and N8N (B)');
  console.log('═'.repeat(60));

  const results = [];

  // Run each test category
  for (const category of testCategories) {
    const passed = runTestCategory(category);
    results.push({ category, passed });
    
    // Small delay between categories
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  console.log('\n' + '═'.repeat(60));
  console.log('📊 FINAL RESULTS');
  console.log('═'.repeat(60));

  results.forEach(result => {
    const status = result.passed ? '✅ PASS' : '❌ FAIL';
    console.log(`${status} ${result.category.name}`);
  });

  const allPassed = results.every(r => r.passed);
  
  console.log('\n' + '═'.repeat(60));
  console.log(allPassed ? 
    '🎉 ALL CRM TESTS PASSED! System ready for production.' :
    '⚠️ Some tests failed. Review and fix issues.'
  );
  console.log('═'.repeat(60));

  // Generate coverage if all tests pass
  if (allPassed) {
    console.log('\n🔍 Generating coverage report...');
    runAllTestsWithCoverage();
  }

  // Generate summary report
  const summaryReport = generateSummaryReport(results);
  
  // Exit with appropriate code
  process.exit(allPassed ? 0 : 1);
}

// Handle errors
process.on('uncaughtException', (error) => {
  console.error('💥 Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('💥 Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Run main function
main().catch(error => {
  console.error('💥 Test suite failed:', error);
  process.exit(1);
});