#!/usr/bin/env node

/**
 * Script para verificar la configuraci√≥n de transcripci√≥n de voz
 */

import 'dotenv/config';
import { existsSync } from 'fs';
import { join } from 'path';

console.log('\nüé§ Verificaci√≥n de Configuraci√≥n de Transcripci√≥n de Voz\n');
console.log('=' .repeat(50));

// Verificar archivo .env
const envPath = join(process.cwd(), '.env');
if (!existsSync(envPath)) {
    console.log('‚ùå ERROR: No se encontr√≥ archivo .env');
    console.log('   Crea un archivo .env bas√°ndote en env.example');
    process.exit(1);
}
console.log('‚úÖ Archivo .env encontrado');

// Verificar variables cr√≠ticas
const requiredVars = {
    'OPENAI_API_KEY': process.env.OPENAI_API_KEY,
    'WHAPI_TOKEN': process.env.WHAPI_TOKEN,
    'ENABLE_VOICE_TRANSCRIPTION': process.env.ENABLE_VOICE_TRANSCRIPTION
};

let hasErrors = false;

console.log('\nüìã Variables de entorno:');
console.log('-' .repeat(50));

for (const [varName, value] of Object.entries(requiredVars)) {
    if (!value || value === 'tu-api-key-aqui' || value === 'tu-whapi-token-aqui') {
        console.log(`‚ùå ${varName}: No configurado o valor por defecto`);
        hasErrors = true;
    } else {
        const displayValue = varName.includes('KEY') || varName.includes('TOKEN') 
            ? value.substring(0, 10) + '...' 
            : value;
        console.log(`‚úÖ ${varName}: ${displayValue}`);
    }
}

// Verificar configuraci√≥n espec√≠fica de voz
console.log('\nüé§ Configuraci√≥n de Transcripci√≥n:');
console.log('-' .repeat(50));

const voiceEnabled = process.env.ENABLE_VOICE_TRANSCRIPTION === 'true';
console.log(`Transcripci√≥n habilitada: ${voiceEnabled ? '‚úÖ S√ç' : '‚ùå NO'}`);

if (!voiceEnabled) {
    console.log('\n‚ö†Ô∏è  IMPORTANTE: La transcripci√≥n de voz est√° DESHABILITADA');
    console.log('   Para habilitarla, configura en .env:');
    console.log('   ENABLE_VOICE_TRANSCRIPTION=true\n');
} else {
    console.log('\nConfiguraci√≥n adicional:');
    console.log(`- Idioma Whisper: ${process.env.WHISPER_LANGUAGE || 'es'}`);
    console.log(`- Tama√±o m√°ximo audio: ${(parseInt(process.env.MAX_AUDIO_SIZE || '26214400') / 1024 / 1024).toFixed(1)} MB`);
    console.log(`- Respuestas de voz: ${process.env.ENABLE_VOICE_RESPONSES === 'true' ? 'Habilitadas' : 'Deshabilitadas'}`);
    
    if (process.env.ENABLE_VOICE_RESPONSES === 'true') {
        console.log(`- Modelo de voz: ${process.env.VOICE_RESPONSE_MODEL || 'nova'}`);
        console.log(`- Velocidad de voz: ${process.env.VOICE_RESPONSE_SPEED || '1.0'}x`);
    }
}

// Resumen
console.log('\n' + '=' .repeat(50));
if (hasErrors) {
    console.log('‚ùå Hay errores en la configuraci√≥n. Revisa tu archivo .env');
    process.exit(1);
} else if (!voiceEnabled) {
    console.log('‚ö†Ô∏è  La transcripci√≥n est√° deshabilitada pero la configuraci√≥n base es correcta');
    console.log('   Cambia ENABLE_VOICE_TRANSCRIPTION=true para activarla');
} else {
    console.log('‚úÖ ¬°Configuraci√≥n correcta! La transcripci√≥n de voz est√° lista para usar');
}

console.log('=' .repeat(50));
console.log('\n');