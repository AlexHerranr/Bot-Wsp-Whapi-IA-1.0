/**
 * Script de prueba para verificar que la funci√≥n get_conversation_context est√° registrada
 */

const { FUNCTION_REGISTRY } = require('../src/functions/registry/function-registry.js');

async function testContextFunction() {
    try {
        console.log('üß™ Verificando funci√≥n get_conversation_context...');
        
        // Verificar si la funci√≥n est√° registrada
        const contextFunction = FUNCTION_REGISTRY.getFunction('get_conversation_context');
        
        if (contextFunction) {
            console.log('‚úÖ Funci√≥n get_conversation_context encontrada en el registro');
            console.log('üìã Nombre:', contextFunction.name);
            console.log('üìù Descripci√≥n:', contextFunction.description);
            console.log('üè∑Ô∏è Categor√≠a:', contextFunction.category);
            console.log('üìä Versi√≥n:', contextFunction.version);
            console.log('‚úÖ Habilitada:', contextFunction.enabled);
            
            console.log('\nüîß Par√°metros:');
            console.log('Context Level:', contextFunction.parameters.properties.context_level.description);
            console.log('Opciones:', contextFunction.parameters.properties.context_level.enum);
            
            console.log('\nüéâ Verificaci√≥n completada exitosamente!');
            console.log('‚úÖ La funci√≥n get_conversation_context est√° correctamente registrada');
            
        } else {
            console.error('‚ùå Funci√≥n get_conversation_context no encontrada en el registro');
            
            console.log('\nüìã Funciones disponibles:');
            const functions = FUNCTION_REGISTRY.getAllFunctions();
            functions.forEach((func, name) => {
                console.log(`  - ${name}: ${func.description}`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå Error en la verificaci√≥n:', error.message);
        console.error('Stack:', error.stack);
        process.exit(1);
    }
}

// Ejecutar la verificaci√≥n
testContextFunction(); 