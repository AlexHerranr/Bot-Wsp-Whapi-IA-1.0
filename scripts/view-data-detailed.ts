// scripts/view-data-detailed.ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function viewDetailedData() {
    try {
        await prisma.$connect();
        console.log('üìä DATOS DETALLADOS DE LA BASE DE DATOS');
        console.log('==========================================\n');

        // Obtener todos los datos con relaciones
        const users = await prisma.user.findMany({
            include: {
                threads: {
                    include: {
                        messages: {
                            orderBy: { createdAt: 'asc' }
                        }
                    }
                }
            },
            orderBy: { createdAt: 'desc' }
        });

        const totalUsers = users.length;
        const totalThreads = users.reduce((sum, user) => sum + user.threads.length, 0);
        const totalMessages = users.reduce((sum, user) => 
            sum + user.threads.reduce((threadSum, thread) => threadSum + thread.messages.length, 0), 0
        );

        console.log(`üìà RESUMEN GENERAL:`);
        console.log(`   üë• Total Usuarios: ${totalUsers}`);
        console.log(`   üí¨ Total Threads: ${totalThreads}`);
        console.log(`   üìù Total Mensajes: ${totalMessages}`);
        console.log(`   üìÖ √öltimo registro: ${users[0]?.createdAt || 'N/A'}\n`);

        console.log('üë• USUARIOS DETALLADOS:');
        console.log('========================\n');

        users.forEach((user, userIndex) => {
            console.log(`${userIndex + 1}. üì± USUARIO: ${user.phoneNumber}`);
            console.log(`   üë§ Nombre: ${user.name || 'Sin nombre'}`);
            console.log(`   üÜî ID: ${user.id}`);
            console.log(`   üìÖ Creado: ${user.createdAt.toLocaleString('es-CO')}`);
            console.log(`   ‚è∞ √öltima actividad: ${user.lastActivity.toLocaleString('es-CO')}`);
            console.log(`   üí¨ Threads: ${user.threads.length}`);
            
            if (user.threads.length > 0) {
                console.log(`\n   üßµ CONVERSACIONES:`);
                user.threads.forEach((thread, threadIndex) => {
                    console.log(`     ${threadIndex + 1}. Thread: ${thread.openaiId}`);
                    console.log(`        üí¨ Chat ID: ${thread.chatId}`);
                    console.log(`        üë§ Usuario: ${thread.userName || 'N/A'}`);
                    console.log(`        üìÖ Creado: ${thread.createdAt.toLocaleString('es-CO')}`);
                    console.log(`        ‚è∞ √öltima actividad: ${thread.lastActivity.toLocaleString('es-CO')}`);
                    console.log(`        üè∑Ô∏è Labels: ${JSON.stringify(thread.labels) || '[]'}`);
                    console.log(`        üìù Mensajes: ${thread.messages.length}`);
                    
                    if (thread.messages.length > 0) {
                        console.log(`\n        üí¨ MENSAJES:`);
                        thread.messages.forEach((message, msgIndex) => {
                            const role = message.role === 'user' ? 'üë§' : 'ü§ñ';
                            const preview = message.content.length > 50 ? 
                                message.content.substring(0, 50) + '...' : 
                                message.content;
                            console.log(`           ${msgIndex + 1}. ${role} ${message.role}: "${preview}"`);
                            console.log(`              üìÖ ${message.createdAt.toLocaleString('es-CO')}`);
                            if (message.metadata) {
                                console.log(`              üîß Metadata: ${JSON.stringify(message.metadata)}`);
                            }
                        });
                    }
                    console.log('');
                });
            }
            console.log(''.padEnd(50, '‚îÄ'));
            console.log('');
        });

        if (totalUsers === 0) {
            console.log('‚ö†Ô∏è No hay datos en la base de datos a√∫n.');
            console.log('üí° Env√≠a un mensaje al webhook para crear datos de prueba.');
        }

        console.log('\n‚úÖ Consulta completada exitosamente');
        
    } catch (error) {
        console.error('‚ùå Error consultando datos:', error);
    } finally {
        await prisma.$disconnect();
    }
}

viewDetailedData();