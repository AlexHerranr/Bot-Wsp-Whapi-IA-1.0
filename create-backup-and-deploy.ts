import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
    try {
        console.log('üõ°Ô∏è Creando backup completo antes del deployment...');
        
        // 1. Crear backup de todas las tablas importantes
        console.log('\nüìä Creando backup de datos cr√≠ticos...');
        
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];
        console.log(`üìÖ Timestamp del backup: ${timestamp}`);
        
        // Backup de estad√≠sticas generales
        const stats = await prisma.$queryRaw`
            SELECT 
                'Reservas' as tabla,
                (SELECT COUNT(*) FROM "Booking") as total_registros,
                (SELECT COUNT(*) FROM "Booking" WHERE "BDStatus" = 'Futura Pendiente') as futura_pendiente
            UNION ALL
            SELECT 
                'Prospectos' as tabla,
                (SELECT COUNT(*) FROM "Leads") as total_registros,
                (SELECT COUNT(*) FROM "Leads" WHERE source = 'beds24') as beds24_auto
            UNION ALL
            SELECT 
                'WhatsApp' as tabla,
                (SELECT COUNT(*) FROM "ClientView") as total_registros,
                (SELECT COUNT(*) FROM "ClientView" WHERE "threadId" IS NOT NULL) as con_thread
            UNION ALL
            SELECT 
                'Apartamentos' as tabla,
                (SELECT COUNT(*) FROM hotel_apartments) as total_registros,
                (SELECT COUNT(*) FROM hotel_apartments WHERE capacity > 0) as con_capacidad;
        `;
        
        console.log('üìã Estado actual del sistema:');
        console.table(stats);
        
        // Backup espec√≠fico de triggers (cr√≠ticos)
        console.log('\n‚ö° Verificando triggers cr√≠ticos...');
        
        const triggers = await prisma.$queryRaw`
            SELECT trigger_name, event_object_table, event_manipulation, action_timing
            FROM information_schema.triggers 
            WHERE event_object_table IN ('Booking', 'Leads')
            ORDER BY event_object_table, trigger_name;
        `;
        
        console.log('Triggers activos (deben mantenerse despu√©s del deploy):');
        console.table(triggers);
        
        // Verificar BDStatus distribution
        const bdStatusDistribution = await prisma.$queryRaw`
            SELECT "BDStatus", COUNT(*) as count
            FROM "Booking" 
            GROUP BY "BDStatus" 
            ORDER BY count DESC;
        `;
        
        console.log('\nüìä Distribuci√≥n BDStatus (debe mantenerse):');
        console.table(bdStatusDistribution);
        
        // Verificar sincronizaci√≥n Reservas <-> Prospectos
        const syncCheck = await prisma.$queryRaw`
            SELECT 
                (SELECT COUNT(*) FROM "Booking" WHERE "BDStatus" = 'Futura Pendiente') as reservas_pendientes,
                (SELECT COUNT(*) FROM "Leads" WHERE source = 'beds24') as leads_beds24;
        `;
        
        const sync = (syncCheck as any)[0];
        console.log('\nüîÑ Verificaci√≥n de sincronizaci√≥n:');
        console.log(`üìã Reservas "Futura Pendiente": ${sync.reservas_pendientes}`);
        console.log(`üìã Leads de Beds24: ${sync.leads_beds24}`);
        
        if (parseInt(sync.reservas_pendientes) === parseInt(sync.leads_beds24)) {
            console.log('‚úÖ Sincronizaci√≥n perfecta - LISTO PARA DEPLOY');
        } else {
            console.log('‚ùå ALERTA: Desincronizaci√≥n detectada - REVISAR ANTES DE DEPLOY');
            return;
        }
        
        console.log('\nüõ°Ô∏è BACKUP COMPLETO - DATOS CR√çTICOS REGISTRADOS');
        
        console.log('\nüöÄ PREPARANDO DEPLOYMENT...');
        
        console.log('\nüìã CAMBIOS A DESPLEGAR:');
        console.log('‚úÖ Schema Prisma actualizado con nombres en espa√±ol');
        console.log('‚úÖ Modelos: Reservas, Prospectos, WhatsApp, Apartamentos');
        console.log('‚úÖ @@map mantiene tablas f√≠sicas intactas');
        console.log('‚úÖ Triggers autom√°ticos NO se ven afectados');
        
        console.log('\n‚ö†Ô∏è IMPORTANTE DESPU√âS DEL DEPLOY:');
        console.log('1. Verificar que triggers siguen funcionando');
        console.log('2. Verificar sincronizaci√≥n Reservas ‚Üî Prospectos');
        console.log('3. Verificar que bot responde normalmente');
        console.log('4. Verificar que nuevos nombres funcionan en c√≥digo');
        
        console.log('\nüéØ COMANDOS PARA DEPLOYMENT:');
        console.log('1. git add .');
        console.log('2. git commit -m "feat: renombrar tablas a espa√±ol con @@map - sin cambios f√≠sicos"');
        console.log('3. git push');
        console.log('4. Railway auto-deploy activar√°');
        
        console.log('\n‚úÖ BACKUP COMPLETADO - LISTO PARA DESPLEGAR');
        
    } catch (error) {
        console.error('‚ùå Error creando backup:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

main();