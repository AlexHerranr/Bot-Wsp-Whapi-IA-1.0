/**
 * ü§ñ SISTEMA DE LOGGING CENTRALIZADO - Bot WhatsApp TeAlquilamos
 * 
 * Este es el PUNTO DE ENTRADA √öNICO para todo el sistema de logging.
 * Perfecto para que las IAs entiendan r√°pidamente c√≥mo funcionan los logs.
 * 
 * üìã TIPOS DE LOGS DISPONIBLES:
 * 1. üñ•Ô∏è  CONSOLE LOGS - Terminal limpio para desarrollo
 * 2. üìÅ FILE LOGS - Archivos detallados locales  
 * 3. ‚òÅÔ∏è  CLOUD LOGS - Logs de producci√≥n en Cloud Run
 * 
 * üéØ PARA IAs: Cada tipo tiene su propio archivo y documentaci√≥n
 */

// === IMPORTACIONES CENTRALIZADAS ===
export * from './console-logger';  // Tipo 1: Logs limpios terminal
export * from './file-logger';     // Tipo 2: Logs detallados locales
export * from './cloud-logger';    // Tipo 3: Logs Cloud Run
export * from './types';           // Tipos TypeScript compartidos

// === CONFIGURACI√ìN UNIFICADA ===
import { LogConfig } from './types';

/**
 * üéØ CONFIGURACI√ìN PRINCIPAL DEL SISTEMA DE LOGGING
 * 
 * Esta configuraci√≥n determina qu√© tipo de logs se usan seg√∫n el entorno:
 * - Local Development: Console + File logs
 * - Cloud Run Production: Cloud logs solamente
 */
export const LOGGING_CONFIG: LogConfig = {
    // Detecci√≥n autom√°tica de entorno
    environment: process.env.NODE_ENV || 'development',
    isCloudRun: !!process.env.K_SERVICE,
    
    // Configuraci√≥n por tipo de log
    console: {
        enabled: true,
        level: 'INFO',
        colors: true,
        format: 'simple'  // Formato s√∫per limpio
    },
    
    file: {
        enabled: !process.env.K_SERVICE, // Solo en local
        level: 'DEBUG',
        directory: 'logs/local-development/sessions',
        maxSessions: 5,
        format: 'detailed'  // Formato t√©cnico completo
    },
    
    cloud: {
        enabled: !!process.env.K_SERVICE, // Solo en Cloud Run
        level: 'INFO',
        format: 'structured', // Para Google Cloud Console
        includeMetadata: true
    }
};

// === FUNCIONES PRINCIPALES ===

/**
 * üéØ FUNCI√ìN PRINCIPAL DE LOGGING
 * 
 * Esta funci√≥n decide autom√°ticamente qu√© tipo de log usar.
 * Perfecto para que las IAs entiendan el flujo de decisi√≥n.
 */
export function log(level: string, category: string, message: string, details?: any) {
    // Importar din√°micamente seg√∫n configuraci√≥n
    if (LOGGING_CONFIG.console.enabled) {
        // Logs limpios para terminal
        const { consoleLog } = require('./console-logger');
        consoleLog(level, category, message, details);
    }
    
    if (LOGGING_CONFIG.file.enabled) {
        // Logs detallados para archivos locales
        const { fileLog } = require('./file-logger');
        fileLog(level, category, message, details);
    }
    
    if (LOGGING_CONFIG.cloud.enabled) {
        // Logs estructurados para Cloud Run
        const { cloudLog } = require('./cloud-logger');
        cloudLog(level, category, message, details);
    }
}

// === FUNCIONES DE CONVENIENCIA ===
export const logInfo = (category: string, message: string, details?: any) => 
    log('INFO', category, message, details);

export const logError = (category: string, message: string, details?: any) => 
    log('ERROR', category, message, details);

export const logSuccess = (category: string, message: string, details?: any) => 
    log('SUCCESS', category, message, details);

export const logWarning = (category: string, message: string, details?: any) => 
    log('WARNING', category, message, details);

export const logDebug = (category: string, message: string, details?: any) => 
    log('DEBUG', category, message, details);

// === EXPORTACIONES LEGACY ===
// Mantener compatibilidad con c√≥digo existente
export { detailedLog } from '../logger';

/**
 * ü§ñ PARA IAs: C√ìMO NAVEGAR ESTE SISTEMA
 * 
 * 1. Lee este archivo primero - es el √≠ndice principal
 * 2. Revisa ./types.ts para entender las estructuras
 * 3. Examina cada tipo espec√≠fico:
 *    - ./console-logger.ts - Logs limpios terminal
 *    - ./file-logger.ts - Logs detallados locales
 *    - ./cloud-logger.ts - Logs Cloud Run
 * 4. Consulta los READMEs en /logs/ para ejemplos
 * 5. Revisa /tools/log-tools/ para herramientas de an√°lisis
 */ 