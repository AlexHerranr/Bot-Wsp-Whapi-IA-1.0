generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model CRM {
  id                  Int       @id(map: "IA_CRM_Clientes_pkey") @default(autoincrement())
  phoneNumber         String    @unique(map: "IA_CRM_Clientes_phoneNumber_key") @db.VarChar(50)
  clientName          String?   @db.VarChar(255)
  email               String?   @db.VarChar(255)
  bookingId           String?   @db.VarChar(255)
  currentStatus       String?   @db.VarChar(50)
  source              String?   @db.VarChar(50)
  profileStatus       String?
  proximaAccion       String?   @db.VarChar(255)
  fechaProximaAccion  DateTime? @db.Timestamp(6)
  prioridad           Int?      @default(3)
  propertyName        String?   @db.VarChar(255)
  arrivalDate         DateTime? @db.Date
  departureDate       DateTime? @db.Date
  lastInteraction     DateTime? @db.Timestamp(6)
  lastWhatsappMessage String?
  threadId            String?   @db.VarChar(255)
  totalBookings       Int?      @default(0)
  totalValue          Int?      @default(0)
  automationEnabled   Boolean?  @default(true)
  internalNotes       String?
  createdAt           DateTime? @default(now()) @db.Timestamp(6)
  updatedAt           DateTime? @default(now()) @db.Timestamp(6)
  wspLabels           String?

  @@index([bookingId], map: "idx_ia_crm_booking")
  @@index([phoneNumber], map: "idx_ia_crm_phone")
  @@index([fechaProximaAccion, prioridad], map: "idx_ia_crm_proxima")
  @@index([currentStatus], map: "idx_ia_crm_status")
}

model WhatsApp {
  phoneNumber      String   @id
  name             String?
  userName         String?
  labels           String?
  chatId           String?  @unique
  lastActivity     DateTime
  threadId         String?
  threadTokenCount Int?     @default(0)
  
  @@map("Chats")
}

model Clientes {
  id                Int       @id(map: "Contactos_pkey") @default(autoincrement())
  phoneNumber       String    @unique(map: "Contactos_phoneNumber_key") @db.VarChar(50)
  name              String?   @db.VarChar(255)
  email             String?   @db.VarChar(255)
  whatsappChatId    String?   @unique(map: "Contactos_whatsappChatId_key") @db.VarChar(100)
  whatsappLabels    String?
  lastWhatsappMsg   DateTime? @db.Timestamp(6)
  hasWhatsapp       Boolean?  @default(false)
  totalBookings     Int?      @default(0)
  confirmedBookings Int?      @default(0)
  pendingBookings   Int?      @default(0)
  cancelledBookings Int?      @default(0)
  lastCheckIn       DateTime? @db.Date
  nextCheckIn       DateTime? @db.Date
  totalSpent        Decimal?  @default(0) @db.Decimal(12, 2)
  lastActivity      DateTime? @db.Timestamp(6)
  source            String[]  @default([])
  status            String?   @default("active") @db.VarChar(20)
  createdAt         DateTime? @default(now()) @db.Timestamp(6)
  updatedAt         DateTime? @default(now()) @db.Timestamp(6)
  syncErrors        Int?      @default(0)

  @@index([lastActivity], map: "idx_contactos_activity")
  @@index([phoneNumber], map: "idx_contactos_phone")
  @@index([status], map: "idx_contactos_status")
  @@index([hasWhatsapp], map: "idx_contactos_whatsapp")
}

model ContactosSyncLog {
  id          Int       @id @default(autoincrement())
  timestamp   DateTime? @default(now()) @db.Timestamp(6)
  source      String?   @db.VarChar(50)
  action      String?   @db.VarChar(50)
  phoneNumber String?   @db.VarChar(20)
  success     Boolean?
  error       String?
}

model Oportunidades {
  id            Int      @id(map: "Leads_pkey") @default(autoincrement())
  bookingId     String   @unique(map: "Leads_bookingId_key") @db.VarChar(255)
  guestName     String   @db.VarChar(255)
  phone         String   @db.VarChar(50)
  propertyName  String   @db.VarChar(255)
  arrivalDate   DateTime @db.Date
  departureDate DateTime @db.Date
  numNights     Int
  totalPersons  Int
  channel       String   @db.VarChar(100)
  createdAt     DateTime @default(now()) @db.Timestamptz(6)

  @@index([arrivalDate], map: "idx_Leads_arrivalDate")
  @@index([channel], map: "idx_Leads_channel")
  @@index([phone], map: "idx_Leads_phone")
  @@index([propertyName, arrivalDate], map: "idx_Leads_propertyName_arrivalDate")
}

model Apartamentos {
  id           Int    @id(map: "hotel_apartments_pkey") @default(autoincrement())
  propertyId   Int    @map("property_id")
  roomId       Int    @unique(map: "hotel_apartments_room_id_key") @map("room_id")
  roomName     String @map("room_name")
  extraCharge  Json   @default("{\"amount\": 70000, \"description\": \"Cargo adicional:\"}") @map("extra_charge")
  capacity     Int    @default(4)
  
  @@map("Propiedades")
}

model Reservas {
  id            Int      @id(map: "Booking_pkey") @default(autoincrement())
  bookingId     String   @unique(map: "Booking_bookingId_key")
  phone         String?
  guestName     String?
  status        String?
  internalNotes String?
  propertyName  String?
  arrivalDate   String?
  departureDate String?
  numNights     Int?
  totalPersons  Int?
  totalCharges  String?
  totalPayments String?
  balance       String?
  basePrice     String?
  channel       String?
  email         String?
  apiReference  String?
  charges       Json     @default("[]")
  payments      Json     @default("[]")
  messages      Json     @default("[]")
  infoItems     Json     @default("[]")
  notes         String?
  bookingDate   String?
  modifiedDate  String?
  lastUpdatedBD DateTime @default(now())
  raw           Json?
  BDStatus      String?

  @@index([arrivalDate], map: "Booking_arrivalDate_idx")
  @@index([bookingId], map: "Booking_bookingId_idx")
  @@index([channel], map: "Booking_channel_idx")
  @@index([departureDate], map: "Booking_departureDate_idx")
  @@index([guestName], map: "Booking_guestName_idx")
  @@index([modifiedDate], map: "Booking_modifiedDate_idx")
  @@index([phone], map: "Booking_phone_idx")
  @@index([propertyName, departureDate], map: "Booking_propertyName_departureDate_idx")
  @@index([status], map: "Booking_status_idx")
}
