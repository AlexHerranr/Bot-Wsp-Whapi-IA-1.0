#!/usr/bin/env node

// Script para verificar que el deploy tiene la versi√≥n correcta
require('dotenv').config();

const axios = require('axios');

async function verifyDeploy() {
    console.log('üîç Verificando Deploy - Sistema de Contexto Optimizado');
    console.log('=====================================================\n');
    
    const EXPECTED_COMMIT = '596132570a1dff5313d10c8217ef67acac0fa44c';
    const RAILWAY_URL = process.env.RAILWAY_URL || 'https://bot-wsp-whapi-ia-production.up.railway.app';
    
    console.log(`üìç URL de Railway: ${RAILWAY_URL}`);
    console.log(`üéØ Commit esperado: ${EXPECTED_COMMIT.substring(0, 8)}`);
    console.log('');
    
    try {
        // 1. Verificar que el servicio responde
        console.log('üîç 1. Verificando que el servicio est√© activo...');
        
        const healthResponse = await axios.get(`${RAILWAY_URL}/health`, {
            timeout: 10000
        });
        
        if (healthResponse.status === 200) {
            console.log('‚úÖ Servicio activo y respondiendo');
        }
        
        // 2. Verificar m√©tricas si est√°n disponibles
        console.log('\nüîç 2. Verificando m√©tricas del sistema...');
        
        try {
            const metricsResponse = await axios.get(`${RAILWAY_URL}/metrics`, {
                timeout: 10000
            });
            
            if (metricsResponse.data) {
                console.log('‚úÖ Endpoint de m√©tricas accesible');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è  M√©tricas no accesibles (normal si no est√°n configuradas)');
        }
        
        // 3. Instrucciones para verificaci√≥n manual
        console.log('\nüìã Verificaci√≥n Manual en Railway Console:');
        console.log('==========================================');
        console.log('1. Ve a Railway Dashboard > Logs');
        console.log('2. Busca al inicio del deploy:');
        console.log(`   "Deploying commit: ${EXPECTED_COMMIT}"`);
        console.log('3. Confirma que aparece:');
        console.log('   "[HISTORY_STRATEGY] OpenAI decide contexto bajo demanda"');
        console.log('4. Confirma que NO aparece:');
        console.log('   "[HISTORY_INJECTION_COMPLETED]"');
        console.log('   "[HISTORY_INJECTION_SKIP]"');
        
        console.log('\nüß™ Test Funcional:');
        console.log('==================');
        console.log('1. Env√≠a un mensaje al bot: "recuerda lo que hablamos"');
        console.log('2. Verifica en logs que aparece:');
        console.log('   "[CONTEXT_FUNCTION] Solicitando contexto de conversaci√≥n"');
        console.log('3. Verifica que OpenAI usa: get_conversation_context');
        
        console.log('\n‚úÖ Verificaci√≥n completada exitosamente!');
        console.log('\nüéØ Tu versi√≥n local coincide con Railway si:');
        console.log('   - Hash del commit coincide');
        console.log('   - Logs muestran nueva estrategia');
        console.log('   - Funci√≥n de contexto funciona correctamente');
        
    } catch (error) {
        console.log('‚ùå Error verificando deploy:');
        console.log(`üîç Error: ${error.message}`);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('üí° El servicio puede estar reinici√°ndose despu√©s del deploy');
        }
    }
}

// Ejecutar verificaci√≥n
verifyDeploy().catch(console.error);